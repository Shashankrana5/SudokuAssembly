# name: Basic deploy
# on:
#   push:
#     branches: [ docker-deployments ]

# # jobs:
#   # EC2-Deploy:
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - id: deploy
#   #       uses: bitovi/github-actions-deploy-docker-to-ec2@v0.5.0
#   #       with:
#   #         aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #         aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #         aws_default_region: us-east-2

#   #         app_port: 8080
  

# # jobs:
# #   Build:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v3
# #         uses: actions/setup-java@v3
# #         with:
# #           java-version: '1.8'
# #           distribution: 'temurin'
# #       - name: Build and test
# #         run: mvn clean install -Dmaven.test.skip=true
# #       - name: Build Docker image
# #         run:
# #           docker build -t sudokuassembly .
#       #     # docker tag my-spring-boot-app my-docker-registry/my-spring-boot-app
#       #     # docker push my-docker-registry/my-spring-boot-app


#       # steps:
#       # - uses: actions/checkout@v3
#       # - name: Set up JDK 17
#       #   uses: actions/setup-java@v3
#       #   with:
#       #     java-version: '17'
#       #     distribution: 'temurin'
#       # - name: Build with Maven
#       #   run: mvn --batch-mode --update-snapshots package

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up JDK 1.8
#         uses: actions/setup-java@v3
#         with:
#           java-version: '8.0'
#           distribution: 'temurin'
#       - name: Build with Maven
#         run: mvn clean install -Dmaven.test.skip=true
#       - name: docker build
#         run: docker build -t sudokuassembly .


#       # - name: Checkout
#       #   uses: actions/checkout@v2    
        
#       # - name: Setup AWS ECR Details
#       #   uses: aws-actions/configure-aws-credentials@v1
#       #   with:
#       #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #     aws-region: ${{secrets.AWS_REGION}}


#       # - name: Login to Amazon ECR
#       #   id: login-pf-aws-ecr
#       #   uses: aws-actions/amazon-ecr-login@v1

#       # - name: Build and push the tagged docker image to Amazon ECR
#       #   env:
#       #     ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
#       #     ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
#       #     IMAGE_TAG: latest
#       #   run: |
#       #     mvn clean install -Dmaven.test.skip=true
#       #     docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#       #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG




#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us‑east‑2 // region you want to push the image to

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR 🏷
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: "docker_nodejs_demo"
#           IMAGE_TAG: v1
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#       # - name: Configure AWS credentials
#       #   uses: aws-actions/configure-aws-credentials@v1
#       #   with:
#       #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #     aws-region: us-east-2

#       # - name: Login to Amazon ECR
#       #   id: login-ecr
#       #   uses: aws-actions/amazon-ecr-login@v1
#       # - name: Build, tag, and push image to Amazon ECR
#       #   env:
#       #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       #     ECR_REPOSITORY: docker_nodejs_demo
#       #     IMAGE_TAG: nodejs_demo_image
#       #   run: |
#       #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#       #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



# name: Basic deploy
# on:
#   push:
#     branches: [ docker-deployments ]

# jobs:
#   EC2-Deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - id: deploy
#         uses: bitovi/github-actions-deploy-docker-to-ec2@v0.5.0
#         with:
#           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws_default_region: us-east-2

name: Build on DockerHub and Deploy to AWS
on:
  push:
    branches: [ docker-deployments ]
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: docker login
  #       env:
  #         DOCKER_USER: ${{secrets.DOCKERHUB_USERNAME}}
  #         DOCKER_PASSWORD: ${{secrets.DOCKERHUB_TOKEN}}
  #       run: |
  #         docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 
  #     - name: Build the Docker image
  #       run: |
  #         mvn clean install -Dmaven.test.skip=true
  #         docker build -t sudokuassembly .
  #         docker tag sudokuassembly shashankrana5/sudokuassembly:latest
  #       # docker build . --file Dockerfile --tag chamodshehanka/node-test:$(date +%s)
  #     - name: Docker Push
  #       run: docker push shashankrana5/sudokuassembly
  deploy:
    # needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
    - name: Build & Deploy
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PEM }}
      
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@ec2-18-191-236-203.us-east-2.compute.amazonaws.com '

            # Now we have got the access of EC2 and we will start the deploy .
            cd /home/ubuntu/<PROJECT_DIRECTORY> &&
            git checkout dev &&
            git fetch --all &&
            git reset --hard origin/dev &&
            git pull origin dev &&
            sudo npm i &&
            sudo npm run build &&
            sudo pm2 stop ./dist/index.js &&
            sudo pm2 start ./dist/index.js
            '




    # - name: Access aws
    #   env:
    #     DEV_ENV_FILE : ${{secrets.SSH_PEM}}
    #   run: |
    #     echo "$DEV_ENV_FILE" > keypair.pem
    #     chmod 600 keypair.pem
    #     cat keypair.pem

    # - name: Set permissions for private key
    #   run: |
    #     echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
    #     chmod 600 key.pem
    # - name: Pull Docker image
    #   run: |
    #     cat keypair.pem
    #     ssh -i  "keypair.pem" ubuntu@ec2-18-191-236-203.us-east-2.compute.amazonaws.com 'sudo docker pull shashankrana5/sudokuassembly:latest'
    # - name: Stop running container
    #   run: |
    #     ssh -i  "keypair.pem" ubuntu@ec2-18-191-236-203.us-east-2.compute.amazonaws.com 'sudo docker stop sudokuassembly || true'
    #     ssh -i  "keypair.pem" ubuntu@ec2-18-191-236-203.us-east-2.compute.amazonaws.com 'sudo docker rm sudokuassembly || true'
    # - name: Run new container
    #   run: |
    #     ssh -i  "keypair.pem" ubuntu@ec2-18-191-236-203.us-east-2.compute.amazonaws.com 'sudo docker run -d --name cddemo -p 80:3000 shashankrana5/cddemo:latest'