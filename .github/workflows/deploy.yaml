name: Basic deploy
on:
  push:
    branches: [ docker-deployments ]

# jobs:
  # EC2-Deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: deploy
  #       uses: bitovi/github-actions-deploy-docker-to-ec2@v0.5.0
  #       with:
  #         aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws_default_region: us-east-2

  #         app_port: 8080
  

# jobs:
#   Build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#         uses: actions/setup-java@v3
#         with:
#           java-version: '1.8'
#           distribution: 'temurin'
#       - name: Build and test
#         run: mvn clean install -Dmaven.test.skip=true
#       - name: Build Docker image
#         run:
#           docker build -t sudokuassembly .
      #     # docker tag my-spring-boot-app my-docker-registry/my-spring-boot-app
      #     # docker push my-docker-registry/my-spring-boot-app


      # steps:
      # - uses: actions/checkout@v3
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '17'
      #     distribution: 'temurin'
      # - name: Build with Maven
      #   run: mvn --batch-mode --update-snapshots package

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '8.0'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install -Dmaven.test.skip=true
      - name: docker build
        run: docker build -t sudokuassembly .


      - name: Checkout
        uses: actions/checkout@v2    
        
      - name: Setup AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}


      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
          IMAGE_TAG: latest
        run: |
          mvn clean install -Dmaven.test.skip=true
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-2

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: docker_nodejs_demo
      #     IMAGE_TAG: nodejs_demo_image
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG